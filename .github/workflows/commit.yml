name: Commit checks

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js 12
      uses: actions/setup-node@v1.4.1
      with:
        node-version: 12.x

    - name: Setup Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Show versions
      run: |
        node --version
        python --version

    - name: Install python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements_dev.txt

    - name: Install node packages
      run: npm install

    - name: Run lint checks
      run: npm run lint

  django-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install ffmpeg exiftool

    - name: Setup Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Show versions
      run: |
        python --version

    - name: Install python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements_dev.txt -r requirements_postgres.txt
        pip install coverage

    - name: Check migrations
      run: |
        coverage run -a manage.py makemigrations --noinput --check

    - name: Check types
      run: |
        coverage run -a manage.py buildtypes
        git diff --exit-code

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/pixelbin
      run: |
        coverage run -a manage.py test
        coverage report

    - name: Upload code coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        bash <(curl -s https://codecov.io/bash) -F django

  jest-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js 12
      uses: actions/setup-node@v1.4.1
      with:
        node-version: 12.x

    - name: Show versions
      run: |
        node --version

    - name: Install node packages
      run: |
        npm install -g gulp
        npm install

    - name: Run tests
      run: |
        gulp jest

    - name: Upload code coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        bash <(curl -s https://codecov.io/bash) -f coverage/coverage-final.json -F jest

  karma-tests:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js 12
      uses: actions/setup-node@v1.4.1
      with:
        node-version: 12.x

    - name: Show versions
      run: |
        node --version

    - name: Install node packages
      run: |
        npm install -g gulp
        npm install

    - name: Run tests
      run: |
        gulp karma

    - name: Upload code coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        bash <(curl -s https://codecov.io/bash) -f coverage/coverage-final.json -F karma

name: Commit checks

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Node.js 12
      uses: actions/setup-node@v1.4.1
      with:
        node-version: 12.x

    - name: Setup Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Show versions
      run: |
        node --version
        python --version

    - name: Install python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pylint-django pylint-plugin-utils

    - name: Install node packages
      run: npm install

    - name: Run lint checks
      run: gulp lint

  generated-content:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
  
      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
  
      - name: Show versions
        run: |
          python --version

      - name: Install python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check migrations
        run: |
          ./manage.py makemigrations --noinput --check

      - name: Check types
        run: |
          ./manage.py buildtypes
          git diff --exit-code

  server-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Show versions
      run: |
        python --version

    - name: Install python packages
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_postgres.txt
        pip install coverage

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/pixelbin
      run: |
        coverage run --branch --source=api manage.py test

    - name: Upload code coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        bash <(curl -s https://codecov.io/bash)
